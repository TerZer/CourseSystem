package lt.terzer.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lt.terzer.Main;
import lt.terzer.courses.Course;
import lt.terzer.databases.CourseDatabase;
import lt.terzer.user.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

public class MainWindow extends JFrame {
    private JTree tree1;
    private JPanel panel1;
    private JList courseJList;
    private User user;

    public MainWindow(User user) {
        super("Program");
        this.user = user;
        setPreferredSize(new Dimension(600, 600));
        setContentPane(panel1);
        pack();
        JMenuBar menuBar = createMenuBar();
        setJMenuBar(menuBar);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);

        DefaultListModel<String> model = new DefaultListModel<>();
        List<Course> courses = Main.getCourseDatabase().getByIds(user.getAccessibleCourses());
        for (Course course : courses) {
            model.addElement(course.getName());
        }
        courseJList.setModel(model);

        courseJList.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    courseJList.setSelectedIndex(courseJList.locationToIndex(e.getPoint()));

                    if (courseJList.getSelectedValue() == null)
                        return;

                    JPopupMenu menu = new JPopupMenu();
                    JMenuItem itemRemove = new JMenuItem("Remove");
                    itemRemove.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            String name = (String) courseJList.getSelectedValue();
                            //TODO replace with ids
                            Main.getCourseDatabase().getByIds(user.getAccessibleCourses()).stream()
                                    .filter(course -> course.getName().equals(name))
                                    .findFirst().ifPresent(course -> Main.getCourseDatabase().remove(course));
                            Main.getCourseDatabase().remove();

                            DefaultListModel<String> m = new DefaultListModel<>();
                            List<Course> courses = Main.getCourseDatabase().getByIds(user.getAccessibleCourses());
                            for (Course course : courses) {
                                m.addElement(course.getName());
                            }
                            courseJList.setModel(m);
                        }
                    });
                    menu.add(itemRemove);
                    menu.show(courseJList, e.getPoint().x, e.getPoint().y);
                }
            }
        });

        //TODO show files
        tree1.setModel(null);
    }

    protected JMenuBar createMenuBar() {
        final JMenuBar menuBar = new JMenuBar();

        JMenu mFile = new JMenu("User");
        mFile.setMnemonic('f');
        JMenuItem item;
        if (user.isAdmin() || user.isCourseCreator()) {
            Action actionCreate = new AbstractAction("Create course...") {
                public void actionPerformed(ActionEvent e) {
                    new CourseCreationWindow(user, () -> {
                        DefaultListModel<String> model = new DefaultListModel<>();
                        List<Course> courses = Main.getCourseDatabase().getByIds(user.getAccessibleCourses());
                        for (Course course : courses) {
                            model.addElement(course.getName());
                        }
                        courseJList.setModel(model);
                    });
                }
            };
            item = mFile.add(actionCreate);
            mFile.add(item);
        }

        mFile.addSeparator();
        Action actionSignout = new AbstractAction("Sign out") {
            public void actionPerformed(ActionEvent e) {
                dispose();
                new LoginWindow();
            }
        };
        item = mFile.add(actionSignout);
        item.setMnemonic('s');
        mFile.add(item);
        Action actionExit = new AbstractAction("Exit") {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        };
        item = mFile.add(actionExit);
        item.setMnemonic('x');
        menuBar.add(mFile);

        return menuBar;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        tree1 = new JTree();
        panel1.add(tree1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        courseJList = new JList();
        panel1.add(courseJList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
